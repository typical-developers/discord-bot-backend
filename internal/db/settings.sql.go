// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: settings.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGuildSettings = `-- name: CreateGuildSettings :one
INSERT INTO guild_settings (guild_id)
VALUES ($1)
RETURNING insert_epoch, guild_id, activity_tracking, activity_tracking_grant, activity_tracking_cooldown
`

func (q *Queries) CreateGuildSettings(ctx context.Context, guildID string) (GuildSetting, error) {
	row := q.db.QueryRow(ctx, createGuildSettings, guildID)
	var i GuildSetting
	err := row.Scan(
		&i.InsertEpoch,
		&i.GuildID,
		&i.ActivityTracking,
		&i.ActivityTrackingGrant,
		&i.ActivityTrackingCooldown,
	)
	return i, err
}

const getGuildActivityRoles = `-- name: GetGuildActivityRoles :many
SELECT
    role_id,
    required_points
FROM guild_activity_roles
WHERE
    guild_activity_roles.guild_id = $1
    AND grant_type = $2
GROUP BY grant_type, role_id, required_points
ORDER BY required_points ASC
`

type GetGuildActivityRolesParams struct {
	GuildID      string
	ActivityType pgtype.Text
}

type GetGuildActivityRolesRow struct {
	RoleID         string
	RequiredPoints pgtype.Int4
}

func (q *Queries) GetGuildActivityRoles(ctx context.Context, arg GetGuildActivityRolesParams) ([]GetGuildActivityRolesRow, error) {
	rows, err := q.db.Query(ctx, getGuildActivityRoles, arg.GuildID, arg.ActivityType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGuildActivityRolesRow
	for rows.Next() {
		var i GetGuildActivityRolesRow
		if err := rows.Scan(&i.RoleID, &i.RequiredPoints); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGuildSettings = `-- name: GetGuildSettings :one
SELECT
    insert_epoch,
    activity_tracking,
    activity_tracking_grant,
    activity_tracking_cooldown
FROM guild_settings
WHERE
    guild_settings.guild_id = $1
LIMIT 1
`

type GetGuildSettingsRow struct {
	InsertEpoch              pgtype.Int4
	ActivityTracking         pgtype.Bool
	ActivityTrackingGrant    pgtype.Int4
	ActivityTrackingCooldown pgtype.Int4
}

func (q *Queries) GetGuildSettings(ctx context.Context, guildID string) (GetGuildSettingsRow, error) {
	row := q.db.QueryRow(ctx, getGuildSettings, guildID)
	var i GetGuildSettingsRow
	err := row.Scan(
		&i.InsertEpoch,
		&i.ActivityTracking,
		&i.ActivityTrackingGrant,
		&i.ActivityTrackingCooldown,
	)
	return i, err
}

const insertActivityRole = `-- name: InsertActivityRole :exec
INSERT INTO guild_activity_roles (guild_id, grant_type, role_id, required_points)
    VALUES ($1, $2, $3, $4::INT)
ON CONFLICT DO NOTHING
`

type InsertActivityRoleParams struct {
	GuildID        string
	GrantType      pgtype.Text
	RoleID         string
	RequiredPoints int32
}

func (q *Queries) InsertActivityRole(ctx context.Context, arg InsertActivityRoleParams) error {
	_, err := q.db.Exec(ctx, insertActivityRole,
		arg.GuildID,
		arg.GrantType,
		arg.RoleID,
		arg.RequiredPoints,
	)
	return err
}

const updateActivitySettings = `-- name: UpdateActivitySettings :exec
INSERT INTO
    guild_settings (guild_id, activity_tracking, activity_tracking_grant, activity_tracking_cooldown)
    VALUES ($1, $2, $3, $4)
ON CONFLICT (guild_id)
DO UPDATE SET
    activity_tracking = COALESCE($2, guild_settings.activity_tracking),
    activity_tracking_grant = COALESCE($3, guild_settings.activity_tracking_grant),
    activity_tracking_cooldown = COALESCE($4, guild_settings.activity_tracking_cooldown)
RETURNING insert_epoch, guild_id, activity_tracking, activity_tracking_grant, activity_tracking_cooldown
`

type UpdateActivitySettingsParams struct {
	GuildID                  string
	ActivityTracking         pgtype.Bool
	ActivityTrackingGrant    pgtype.Int4
	ActivityTrackingCooldown pgtype.Int4
}

func (q *Queries) UpdateActivitySettings(ctx context.Context, arg UpdateActivitySettingsParams) error {
	_, err := q.db.Exec(ctx, updateActivitySettings,
		arg.GuildID,
		arg.ActivityTracking,
		arg.ActivityTrackingGrant,
		arg.ActivityTrackingCooldown,
	)
	return err
}
