// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: guild-leaderboards.sql

package db

import (
	"context"
)

const archiveMonthlyActivityLeaderboard = `-- name: ArchiveMonthlyActivityLeaderboard :exec
MERGE INTO guild_activity_tracking_monthly AS archive
USING (
    SELECT
        EXTRACT (EPOCH FROM date_trunc('month', now() AT TIME ZONE 'utc') - INTERVAL '1 month')::INT AS month_start,
        *
    FROM guild_activity_tracking_monthly_current
) AS current_leaderboard
ON
    archive.month_start = current_leaderboard.month_start
    AND archive.guild_id = current_leaderboard.guild_id
    AND archive.member_id = current_leaderboard.member_id
    AND archive.grant_type = current_leaderboard.grant_type
WHEN MATCHED THEN
    UPDATE SET
        earned_points = current_leaderboard.earned_points
WHEN NOT MATCHED THEN
    INSERT (
        month_start, guild_id, member_id, grant_type, earned_points
    )
    VALUES (
        current_leaderboard.month_start,
        current_leaderboard.guild_id,
        current_leaderboard.member_id,
        current_leaderboard.grant_type,
        current_leaderboard.earned_points
    )
`

func (q *Queries) ArchiveMonthlyActivityLeaderboard(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, archiveMonthlyActivityLeaderboard)
	return err
}

const archiveWeeklyActivityLeaderboard = `-- name: ArchiveWeeklyActivityLeaderboard :exec
MERGE INTO guild_activity_tracking_weekly AS archive
USING (
    SELECT
        EXTRACT (EPOCH FROM date_trunc('week', now() AT TIME ZONE 'utc') - INTERVAL '1 week')::INT AS week_start,
        *
    FROM guild_activity_tracking_weekly_current
) AS current_leaderboard
ON
    archive.week_start = current_leaderboard.week_start
    AND archive.guild_id = current_leaderboard.guild_id
    AND archive.member_id = current_leaderboard.member_id
    AND archive.grant_type = current_leaderboard.grant_type
WHEN MATCHED THEN
    UPDATE SET
        earned_points = current_leaderboard.earned_points
WHEN NOT MATCHED THEN
    INSERT (
        week_start, guild_id, member_id, grant_type, earned_points
    )
    VALUES (
        current_leaderboard.week_start,
        current_leaderboard.guild_id,
        current_leaderboard.member_id,
        current_leaderboard.grant_type,
        current_leaderboard.earned_points
    )
`

func (q *Queries) ArchiveWeeklyActivityLeaderboard(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, archiveWeeklyActivityLeaderboard)
	return err
}

const flushOudatedMonthlyActivityLeaderboard = `-- name: FlushOudatedMonthlyActivityLeaderboard :exec
TRUNCATE TABLE guild_activity_tracking_monthly_current
`

func (q *Queries) FlushOudatedMonthlyActivityLeaderboard(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, flushOudatedMonthlyActivityLeaderboard)
	return err
}

const flushOudatedWeeklyActivityLeaderboard = `-- name: FlushOudatedWeeklyActivityLeaderboard :exec
TRUNCATE TABLE guild_activity_tracking_weekly_current
`

func (q *Queries) FlushOudatedWeeklyActivityLeaderboard(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, flushOudatedWeeklyActivityLeaderboard)
	return err
}

const getAllTimeActivityLeaderboard = `-- name: GetAllTimeActivityLeaderboard :many
SELECT
    rankings.member_id,
    rankings.rank,
    rankings.points
FROM (
    SELECT 
        member_id,
        ROW_NUMBER() OVER (
            ORDER BY
                CASE LOWER($1)::TEXT
                    WHEN 'chat' THEN chat_activity
                    WHEN 'voice' THEN voice_activity
                END DESC,
                CASE LOWER($1)::TEXT
                    WHEN 'chat' THEN last_chat_activity_grant
                    WHEN 'voice' THEN last_voice_activity_grant
                END DESC
        ) AS rank,
        CAST (
            CASE LOWER($1)::TEXT
                WHEN 'chat' THEN chat_activity
                WHEN 'voice' THEN voice_activity
            END AS INT
        ) AS points
    FROM guild_profiles
    WHERE
        guild_profiles.guild_id = $2
) AS rankings
LIMIT $4
OFFSET $3
`

type GetAllTimeActivityLeaderboardParams struct {
	ActivityType string
	GuildID      string
	OffsetBy     int32
	LimitBy      int32
}

type GetAllTimeActivityLeaderboardRow struct {
	MemberID string
	Rank     int64
	Points   int32
}

func (q *Queries) GetAllTimeActivityLeaderboard(ctx context.Context, arg GetAllTimeActivityLeaderboardParams) ([]GetAllTimeActivityLeaderboardRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTimeActivityLeaderboard,
		arg.ActivityType,
		arg.GuildID,
		arg.OffsetBy,
		arg.LimitBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTimeActivityLeaderboardRow
	for rows.Next() {
		var i GetAllTimeActivityLeaderboardRow
		if err := rows.Scan(&i.MemberID, &i.Rank, &i.Points); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTimeActivityLeaderboardPages = `-- name: GetAllTimeActivityLeaderboardPages :one
SELECT
    CAST(CEIL(COUNT(*)::DECIMAL / $1) AS INT) AS total_pages
FROM guild_profiles
WHERE
    guild_id = $2
`

type GetAllTimeActivityLeaderboardPagesParams struct {
	LimitBy interface{}
	GuildID string
}

func (q *Queries) GetAllTimeActivityLeaderboardPages(ctx context.Context, arg GetAllTimeActivityLeaderboardPagesParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, getAllTimeActivityLeaderboardPages, arg.LimitBy, arg.GuildID)
	var total_pages int32
	err := row.Scan(&total_pages)
	return total_pages, err
}

const getMonthlyActivityLeaderboard = `-- name: GetMonthlyActivityLeaderboard :many
SELECT
    rankings.rank,
    rankings.member_id,
    rankings.earned_points
FROM (
    SELECT
        ROW_NUMBER() OVER (
            ORDER BY earned_points DESC
        ) AS rank,
        member_id,
        earned_points
    FROM guild_activity_tracking_monthly_current
    WHERE
        guild_id = $1
        AND grant_type = $2
) AS rankings
LIMIT 15
OFFSET $3
`

type GetMonthlyActivityLeaderboardParams struct {
	GuildID   string
	GrantType string
	OffsetBy  int32
}

type GetMonthlyActivityLeaderboardRow struct {
	Rank         int64
	MemberID     string
	EarnedPoints int32
}

func (q *Queries) GetMonthlyActivityLeaderboard(ctx context.Context, arg GetMonthlyActivityLeaderboardParams) ([]GetMonthlyActivityLeaderboardRow, error) {
	rows, err := q.db.QueryContext(ctx, getMonthlyActivityLeaderboard, arg.GuildID, arg.GrantType, arg.OffsetBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMonthlyActivityLeaderboardRow
	for rows.Next() {
		var i GetMonthlyActivityLeaderboardRow
		if err := rows.Scan(&i.Rank, &i.MemberID, &i.EarnedPoints); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthlyActivityLeaderboardPages = `-- name: GetMonthlyActivityLeaderboardPages :one
SELECT
    CAST(CEIL(COUNT(*)::DECIMAL / $1) AS INT) AS total_pages
FROM guild_activity_tracking_monthly_current
WHERE
    guild_id = $2
    AND grant_type = $3
`

type GetMonthlyActivityLeaderboardPagesParams struct {
	LimitBy   interface{}
	GuildID   string
	GrantType string
}

func (q *Queries) GetMonthlyActivityLeaderboardPages(ctx context.Context, arg GetMonthlyActivityLeaderboardPagesParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, getMonthlyActivityLeaderboardPages, arg.LimitBy, arg.GuildID, arg.GrantType)
	var total_pages int32
	err := row.Scan(&total_pages)
	return total_pages, err
}

const getMonthlyActivityLeaderboardResetDetails = `-- name: GetMonthlyActivityLeaderboardResetDetails :one
SELECT
    (SELECT COUNT(*) FROM guild_activity_tracking_monthly_current) AS row_total,
    COALESCE(
        (SELECT month_start FROM guild_activity_tracking_monthly ORDER BY month_start DESC LIMIT 1),
        0
    )::INT AS last_reset,
    EXTRACT(epoch FROM date_trunc('month', now() AT TIME ZONE 'utc') - INTERVAL '1 month')::INT AS expected_reset
`

type GetMonthlyActivityLeaderboardResetDetailsRow struct {
	RowTotal      int64
	LastReset     int32
	ExpectedReset int32
}

func (q *Queries) GetMonthlyActivityLeaderboardResetDetails(ctx context.Context) (GetMonthlyActivityLeaderboardResetDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getMonthlyActivityLeaderboardResetDetails)
	var i GetMonthlyActivityLeaderboardResetDetailsRow
	err := row.Scan(&i.RowTotal, &i.LastReset, &i.ExpectedReset)
	return i, err
}

const getWeeklyActivityLeaderboard = `-- name: GetWeeklyActivityLeaderboard :many
SELECT
    rankings.rank,
    rankings.member_id,
    rankings.earned_points
FROM (
    SELECT
        ROW_NUMBER() OVER (
            ORDER BY earned_points DESC
        ) AS rank,
        member_id,
        earned_points
    FROM guild_activity_tracking_weekly_current
    WHERE
        guild_id = $1
        AND grant_type = $2
) AS rankings
LIMIT 15
OFFSET $3
`

type GetWeeklyActivityLeaderboardParams struct {
	GuildID   string
	GrantType string
	OffsetBy  int32
}

type GetWeeklyActivityLeaderboardRow struct {
	Rank         int64
	MemberID     string
	EarnedPoints int32
}

func (q *Queries) GetWeeklyActivityLeaderboard(ctx context.Context, arg GetWeeklyActivityLeaderboardParams) ([]GetWeeklyActivityLeaderboardRow, error) {
	rows, err := q.db.QueryContext(ctx, getWeeklyActivityLeaderboard, arg.GuildID, arg.GrantType, arg.OffsetBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWeeklyActivityLeaderboardRow
	for rows.Next() {
		var i GetWeeklyActivityLeaderboardRow
		if err := rows.Scan(&i.Rank, &i.MemberID, &i.EarnedPoints); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWeeklyActivityLeaderboardPages = `-- name: GetWeeklyActivityLeaderboardPages :one
SELECT
    CAST(CEIL(COUNT(*)::DECIMAL / $1) AS INT) AS total_pages
FROM guild_activity_tracking_weekly_current
WHERE
    guild_id = $2
    AND grant_type = $3
`

type GetWeeklyActivityLeaderboardPagesParams struct {
	LimitBy   interface{}
	GuildID   string
	GrantType string
}

func (q *Queries) GetWeeklyActivityLeaderboardPages(ctx context.Context, arg GetWeeklyActivityLeaderboardPagesParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, getWeeklyActivityLeaderboardPages, arg.LimitBy, arg.GuildID, arg.GrantType)
	var total_pages int32
	err := row.Scan(&total_pages)
	return total_pages, err
}

const getWeeklyActivityLeaderboardResetDetails = `-- name: GetWeeklyActivityLeaderboardResetDetails :one
SELECT
    (SELECT COUNT(*) FROM guild_activity_tracking_weekly_current) AS row_total,
    COALESCE(
        (SELECT week_start FROM guild_activity_tracking_weekly ORDER BY week_start DESC LIMIT 1),
        0
    )::INT AS last_reset,
    EXTRACT(epoch FROM date_trunc('week', now() AT TIME ZONE 'utc') - INTERVAL '1 week')::INT AS expected_reset
`

type GetWeeklyActivityLeaderboardResetDetailsRow struct {
	RowTotal      int64
	LastReset     int32
	ExpectedReset int32
}

func (q *Queries) GetWeeklyActivityLeaderboardResetDetails(ctx context.Context) (GetWeeklyActivityLeaderboardResetDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getWeeklyActivityLeaderboardResetDetails)
	var i GetWeeklyActivityLeaderboardResetDetailsRow
	err := row.Scan(&i.RowTotal, &i.LastReset, &i.ExpectedReset)
	return i, err
}

const incrementMonthlyActivityLeaderboard = `-- name: IncrementMonthlyActivityLeaderboard :exec
INSERT INTO guild_activity_tracking_monthly_current (
    grant_type, guild_id, member_id, earned_points
)
VALUES (
    $1, $2, $3, $4
)
ON CONFLICT (grant_type, guild_id, member_id)
DO UPDATE SET
    earned_points = guild_activity_tracking_monthly_current.earned_points + $4
WHERE
    guild_activity_tracking_monthly_current.grant_type = $1
`

type IncrementMonthlyActivityLeaderboardParams struct {
	GrantType    string
	GuildID      string
	MemberID     string
	EarnedPoints int32
}

func (q *Queries) IncrementMonthlyActivityLeaderboard(ctx context.Context, arg IncrementMonthlyActivityLeaderboardParams) error {
	_, err := q.db.ExecContext(ctx, incrementMonthlyActivityLeaderboard,
		arg.GrantType,
		arg.GuildID,
		arg.MemberID,
		arg.EarnedPoints,
	)
	return err
}

const incrementWeeklyActivityLeaderboard = `-- name: IncrementWeeklyActivityLeaderboard :exec
INSERT INTO guild_activity_tracking_weekly_current (
    grant_type, guild_id, member_id, earned_points
)
VALUES (
    $1, $2, $3, $4
)
ON CONFLICT (grant_type, guild_id, member_id)
DO UPDATE SET
    earned_points = guild_activity_tracking_weekly_current.earned_points + $4
WHERE
    guild_activity_tracking_weekly_current.grant_type = $1
`

type IncrementWeeklyActivityLeaderboardParams struct {
	GrantType    string
	GuildID      string
	MemberID     string
	EarnedPoints int32
}

func (q *Queries) IncrementWeeklyActivityLeaderboard(ctx context.Context, arg IncrementWeeklyActivityLeaderboardParams) error {
	_, err := q.db.ExecContext(ctx, incrementWeeklyActivityLeaderboard,
		arg.GrantType,
		arg.GuildID,
		arg.MemberID,
		arg.EarnedPoints,
	)
	return err
}
