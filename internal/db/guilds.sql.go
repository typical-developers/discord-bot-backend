// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: guilds.sql

package db

import (
	"context"
)

const getAllTimeChatActivityRankings = `-- name: GetAllTimeChatActivityRankings :many
SELECT
    CAST (
        ROW_NUMBER() OVER (ORDER BY guild_profiles.activity_points DESC) AS INT
    ) AS rank,
    member_id,
    activity_points
FROM guild_profiles
WHERE
    guild_id = $1
ORDER BY activity_points DESC
LIMIT 15
OFFSET $2
`

type GetAllTimeChatActivityRankingsParams struct {
	GuildID  string
	OffsetBy int32
}

type GetAllTimeChatActivityRankingsRow struct {
	Rank           int32
	MemberID       string
	ActivityPoints int32
}

func (q *Queries) GetAllTimeChatActivityRankings(ctx context.Context, arg GetAllTimeChatActivityRankingsParams) ([]GetAllTimeChatActivityRankingsRow, error) {
	rows, err := q.db.Query(ctx, getAllTimeChatActivityRankings, arg.GuildID, arg.OffsetBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTimeChatActivityRankingsRow
	for rows.Next() {
		var i GetAllTimeChatActivityRankingsRow
		if err := rows.Scan(&i.Rank, &i.MemberID, &i.ActivityPoints); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthlyActivityLeaderboard = `-- name: GetMonthlyActivityLeaderboard :many
SELECT
    CAST (
        ROW_NUMBER() OVER (ORDER BY guild_activity_tracking_monthly_current.earned_points DESC) AS INT
    ) AS rank,
    member_id,
    earned_points
FROM guild_activity_tracking_monthly_current
WHERE
    guild_id = $1
ORDER BY earned_points DESC
LIMIT 15
OFFSET $2
`

type GetMonthlyActivityLeaderboardParams struct {
	GuildID  string
	OffsetBy int32
}

type GetMonthlyActivityLeaderboardRow struct {
	Rank         int32
	MemberID     string
	EarnedPoints int32
}

func (q *Queries) GetMonthlyActivityLeaderboard(ctx context.Context, arg GetMonthlyActivityLeaderboardParams) ([]GetMonthlyActivityLeaderboardRow, error) {
	rows, err := q.db.Query(ctx, getMonthlyActivityLeaderboard, arg.GuildID, arg.OffsetBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMonthlyActivityLeaderboardRow
	for rows.Next() {
		var i GetMonthlyActivityLeaderboardRow
		if err := rows.Scan(&i.Rank, &i.MemberID, &i.EarnedPoints); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWeeklyActivityLeaderboard = `-- name: GetWeeklyActivityLeaderboard :many
SELECT
    CAST (
        ROW_NUMBER() OVER (ORDER BY guild_activity_tracking_weekly_current.earned_points DESC) AS INT
    ) AS rank,
    member_id,
    earned_points
FROM guild_activity_tracking_weekly_current
WHERE
    guild_id = $1
ORDER BY earned_points DESC
LIMIT 15
OFFSET $2
`

type GetWeeklyActivityLeaderboardParams struct {
	GuildID  string
	OffsetBy int32
}

type GetWeeklyActivityLeaderboardRow struct {
	Rank         int32
	MemberID     string
	EarnedPoints int32
}

func (q *Queries) GetWeeklyActivityLeaderboard(ctx context.Context, arg GetWeeklyActivityLeaderboardParams) ([]GetWeeklyActivityLeaderboardRow, error) {
	rows, err := q.db.Query(ctx, getWeeklyActivityLeaderboard, arg.GuildID, arg.OffsetBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWeeklyActivityLeaderboardRow
	for rows.Next() {
		var i GetWeeklyActivityLeaderboardRow
		if err := rows.Scan(&i.Rank, &i.MemberID, &i.EarnedPoints); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementMonthlyActivityLeaderboard = `-- name: IncrementMonthlyActivityLeaderboard :exec
INSERT INTO guild_activity_tracking_monthly_current (
    grant_type, guild_id, member_id, earned_points
)
VALUES (
    $1, $2, $3, $4
)
ON CONFLICT (grant_type, guild_id, member_id)
DO UPDATE SET
    earned_points = guild_activity_tracking_monthly_current.earned_points + $4
WHERE
    guild_activity_tracking_monthly_current.grant_type = $1
`

type IncrementMonthlyActivityLeaderboardParams struct {
	GrantType    string
	GuildID      string
	MemberID     string
	EarnedPoints int32
}

func (q *Queries) IncrementMonthlyActivityLeaderboard(ctx context.Context, arg IncrementMonthlyActivityLeaderboardParams) error {
	_, err := q.db.Exec(ctx, incrementMonthlyActivityLeaderboard,
		arg.GrantType,
		arg.GuildID,
		arg.MemberID,
		arg.EarnedPoints,
	)
	return err
}

const incrementWeeklyActivityLeaderboard = `-- name: IncrementWeeklyActivityLeaderboard :exec
INSERT INTO guild_activity_tracking_weekly_current (
    grant_type, guild_id, member_id, earned_points
)
VALUES (
    $1, $2, $3, $4
)
ON CONFLICT (grant_type, guild_id, member_id)
DO UPDATE SET
    earned_points = guild_activity_tracking_weekly_current.earned_points + $4
WHERE
    guild_activity_tracking_weekly_current.grant_type = $1
`

type IncrementWeeklyActivityLeaderboardParams struct {
	GrantType    string
	GuildID      string
	MemberID     string
	EarnedPoints int32
}

func (q *Queries) IncrementWeeklyActivityLeaderboard(ctx context.Context, arg IncrementWeeklyActivityLeaderboardParams) error {
	_, err := q.db.Exec(ctx, incrementWeeklyActivityLeaderboard,
		arg.GrantType,
		arg.GuildID,
		arg.MemberID,
		arg.EarnedPoints,
	)
	return err
}

const resetMonthlyActivityLeaderboard = `-- name: ResetMonthlyActivityLeaderboard :exec
MERGE INTO guild_activity_tracking_monthly AS archive
USING (
    SELECT
        EXTRACT(epoch FROM date_trunc('month', now() AT TIME ZONE 'utc') - INTERVAL '1 month')::INT AS month_start,
        *
    FROM guild_activity_tracking_monthly_current
) AS current_leaderboard
ON
    archive.month_start = current_leaderboard.month_start
    AND archive.guild_id = current_leaderboard.guild_id
    AND archive.member_id = current_leaderboard.member_id
WHEN MATCHED THEN
    UPDATE SET
        earned_points = current_leaderboard.earned_points
WHEN NOT MATCHED THEN
    INSERT (month_start, grant_type, guild_id, member_id, earned_points)
    VALUES (
        current_leaderboard.month_start,
        current_leaderboard.grant_type,
        current_leaderboard.guild_id,
        current_leaderboard.member_id,
        current_leaderboard.earned_points
    )
`

func (q *Queries) ResetMonthlyActivityLeaderboard(ctx context.Context) error {
	_, err := q.db.Exec(ctx, resetMonthlyActivityLeaderboard)
	return err
}

const resetWeeklyActivityLeaderboard = `-- name: ResetWeeklyActivityLeaderboard :exec
MERGE INTO guild_activity_tracking_weekly AS archive
USING (
    SELECT
        EXTRACT(epoch FROM date_trunc('week', now() AT TIME ZONE 'utc') - INTERVAL '1 week')::INT AS week_start,
        *
    FROM guild_activity_tracking_weekly_current
) AS current_leaderboard
ON
    archive.week_start = current_leaderboard.week_start
    AND archive.guild_id = current_leaderboard.guild_id
    AND archive.member_id = current_leaderboard.member_id
WHEN MATCHED THEN
    UPDATE SET
        earned_points = current_leaderboard.earned_points
WHEN NOT MATCHED THEN
    INSERT (week_start, grant_type, guild_id, member_id, earned_points)
    VALUES (
        current_leaderboard.week_start,
        current_leaderboard.grant_type,
        current_leaderboard.guild_id,
        current_leaderboard.member_id,
        current_leaderboard.earned_points
    )
`

func (q *Queries) ResetWeeklyActivityLeaderboard(ctx context.Context) error {
	_, err := q.db.Exec(ctx, resetWeeklyActivityLeaderboard)
	return err
}

const truncateMonthlyActivityLeaderboard = `-- name: TruncateMonthlyActivityLeaderboard :exec
TRUNCATE TABLE guild_activity_tracking_monthly_current
`

func (q *Queries) TruncateMonthlyActivityLeaderboard(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncateMonthlyActivityLeaderboard)
	return err
}

const truncateWeeklyActivityLeaderboard = `-- name: TruncateWeeklyActivityLeaderboard :exec
TRUNCATE TABLE guild_activity_tracking_weekly_current
`

func (q *Queries) TruncateWeeklyActivityLeaderboard(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncateWeeklyActivityLeaderboard)
	return err
}
