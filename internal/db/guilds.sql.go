// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: guilds.sql

package db

import (
	"context"
)

const getAllTimeChatActivityRankings = `-- name: GetAllTimeChatActivityRankings :many
SELECT
    CAST (
        ROW_NUMBER() OVER (ORDER BY guild_profiles.activity_points DESC) AS INT
    ) AS rank,
    member_id,
    activity_points
FROM guild_profiles
WHERE
    guild_id = $1
ORDER BY activity_points DESC
LIMIT 15
OFFSET $2
`

type GetAllTimeChatActivityRankingsParams struct {
	GuildID  string
	OffsetBy int32
}

type GetAllTimeChatActivityRankingsRow struct {
	Rank           int32
	MemberID       string
	ActivityPoints int32
}

func (q *Queries) GetAllTimeChatActivityRankings(ctx context.Context, arg GetAllTimeChatActivityRankingsParams) ([]GetAllTimeChatActivityRankingsRow, error) {
	rows, err := q.db.Query(ctx, getAllTimeChatActivityRankings, arg.GuildID, arg.OffsetBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTimeChatActivityRankingsRow
	for rows.Next() {
		var i GetAllTimeChatActivityRankingsRow
		if err := rows.Scan(&i.Rank, &i.MemberID, &i.ActivityPoints); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
