// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: member.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createMemberProfile = `-- name: CreateMemberProfile :one
INSERT INTO guild_profiles (guild_id, member_id)
    VALUES ($1, $2)
RETURNING insert_epoch, guild_id, member_id, card_style, chat_activity, last_chat_activity_grant, voice_activity, last_voice_activity_grant
`

type CreateMemberProfileParams struct {
	GuildID  string
	MemberID string
}

func (q *Queries) CreateMemberProfile(ctx context.Context, arg CreateMemberProfileParams) (GuildProfile, error) {
	row := q.db.QueryRowContext(ctx, createMemberProfile, arg.GuildID, arg.MemberID)
	var i GuildProfile
	err := row.Scan(
		&i.InsertEpoch,
		&i.GuildID,
		&i.MemberID,
		&i.CardStyle,
		&i.ChatActivity,
		&i.LastChatActivityGrant,
		&i.VoiceActivity,
		&i.LastVoiceActivityGrant,
	)
	return i, err
}

const getMemberChatActivityRoleInfo = `-- name: GetMemberChatActivityRoleInfo :one
WITH
    activity_roles AS (
        SELECT
            role_id,
            required_points
        FROM guild_activity_roles
        WHERE guild_activity_roles.guild_id = $1
    ),
    all_role_ids AS (
        SELECT CAST(ARRAY_AGG(role_id) AS TEXT[]) AS role_ids
        FROM activity_roles
        WHERE required_points <= CAST($2 AS INT)
    ),
    current_role_info AS (
        SELECT
            role_id,
            required_points
        FROM activity_roles
        WHERE activity_roles.required_points <= CAST($2 AS INT)
        ORDER BY required_points DESC
        LIMIT 1
    ),
    next_role_info AS (
        SELECT
            role_id,
            required_points
        FROM activity_roles
        WHERE activity_roles.required_points > CAST($2 AS INT)
        ORDER BY required_points ASC
        LIMIT 1
    )
SELECT
    all_role_ids.role_ids AS current_roles_ids,

    current_role_info.role_id AS current_role_id,
    current_role_info.required_points AS current_role_required_points,

    next_role_info.role_id AS next_role_id,
    next_role_info.required_points AS next_role_required_points
FROM current_role_info
FULL OUTER JOIN next_role_info ON TRUE
CROSS JOIN all_role_ids
`

type GetMemberChatActivityRoleInfoParams struct {
	GuildID string
	Points  int32
}

type GetMemberChatActivityRoleInfoRow struct {
	CurrentRolesIds           []string
	CurrentRoleID             sql.NullString
	CurrentRoleRequiredPoints sql.NullInt32
	NextRoleID                sql.NullString
	NextRoleRequiredPoints    sql.NullInt32
}

func (q *Queries) GetMemberChatActivityRoleInfo(ctx context.Context, arg GetMemberChatActivityRoleInfoParams) (GetMemberChatActivityRoleInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getMemberChatActivityRoleInfo, arg.GuildID, arg.Points)
	var i GetMemberChatActivityRoleInfoRow
	err := row.Scan(
		pq.Array(&i.CurrentRolesIds),
		&i.CurrentRoleID,
		&i.CurrentRoleRequiredPoints,
		&i.NextRoleID,
		&i.NextRoleRequiredPoints,
	)
	return i, err
}

const getMemberProfile = `-- name: GetMemberProfile :one
WITH profiles AS (
    SELECT
        member_id,
        card_style,

        -- chat activity info
        ROW_NUMBER() OVER (ORDER BY chat_activity DESC, last_chat_activity_grant DESC) AS chat_activity_rank,
        chat_activity,
        last_chat_activity_grant,

        -- voice activity info
        ROW_NUMBER() OVER (ORDER BY voice_activity DESC, last_voice_activity_grant DESC) AS voice_activity_rank,
        voice_activity,
        last_voice_activity_grant
    FROM guild_profiles
    WHERE
        guild_profiles.guild_id = $2
)
SELECT member_id, card_style, chat_activity_rank, chat_activity, last_chat_activity_grant, voice_activity_rank, voice_activity, last_voice_activity_grant
FROM profiles
WHERE
    member_id = $1
`

type GetMemberProfileParams struct {
	MemberID string
	GuildID  string
}

type GetMemberProfileRow struct {
	MemberID               string
	CardStyle              int32
	ChatActivityRank       int64
	ChatActivity           int32
	LastChatActivityGrant  int32
	VoiceActivityRank      int64
	VoiceActivity          int32
	LastVoiceActivityGrant int32
}

func (q *Queries) GetMemberProfile(ctx context.Context, arg GetMemberProfileParams) (GetMemberProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getMemberProfile, arg.MemberID, arg.GuildID)
	var i GetMemberProfileRow
	err := row.Scan(
		&i.MemberID,
		&i.CardStyle,
		&i.ChatActivityRank,
		&i.ChatActivity,
		&i.LastChatActivityGrant,
		&i.VoiceActivityRank,
		&i.VoiceActivity,
		&i.LastVoiceActivityGrant,
	)
	return i, err
}

const incrememberMemberChatActivityPoints = `-- name: IncrememberMemberChatActivityPoints :one
UPDATE guild_profiles
SET
    chat_activity = chat_activity + $1,
    last_chat_activity_grant = EXTRACT(EPOCH FROM now() AT TIME ZONE 'utc')
WHERE
    guild_id = $2
    AND member_id = $3
RETURNING insert_epoch, guild_id, member_id, card_style, chat_activity, last_chat_activity_grant, voice_activity, last_voice_activity_grant
`

type IncrememberMemberChatActivityPointsParams struct {
	Points   int32
	GuildID  string
	MemberID string
}

func (q *Queries) IncrememberMemberChatActivityPoints(ctx context.Context, arg IncrememberMemberChatActivityPointsParams) (GuildProfile, error) {
	row := q.db.QueryRowContext(ctx, incrememberMemberChatActivityPoints, arg.Points, arg.GuildID, arg.MemberID)
	var i GuildProfile
	err := row.Scan(
		&i.InsertEpoch,
		&i.GuildID,
		&i.MemberID,
		&i.CardStyle,
		&i.ChatActivity,
		&i.LastChatActivityGrant,
		&i.VoiceActivity,
		&i.LastVoiceActivityGrant,
	)
	return i, err
}

const migrateMemberProfile = `-- name: MigrateMemberProfile :exec
INSERT INTO guild_profiles (
    guild_id, member_id,
    card_style, chat_activity, last_chat_activity_grant,
    voice_activity, last_voice_activity_grant
)
VALUES (
    $1, $2, $3,
    $4, $5,
    $6, $7
)
ON CONFLICT (guild_id, member_id)
DO UPDATE SET
    card_style = EXCLUDED.card_style,
    chat_activity = EXCLUDED.chat_activity + guild_profiles.chat_activity,
    last_chat_activity_grant = EXCLUDED.last_chat_activity_grant,
    voice_activity = EXCLUDED.voice_activity + guild_profiles.voice_activity,
    last_voice_activity_grant = EXCLUDED.last_voice_activity_grant
`

type MigrateMemberProfileParams struct {
	GuildID                string
	ToMemberID             string
	CardStyle              int32
	ChatActivity           int32
	LastChatActivityGrant  int32
	VoiceActivity          int32
	LastVoiceActivityGrant int32
}

func (q *Queries) MigrateMemberProfile(ctx context.Context, arg MigrateMemberProfileParams) error {
	_, err := q.db.ExecContext(ctx, migrateMemberProfile,
		arg.GuildID,
		arg.ToMemberID,
		arg.CardStyle,
		arg.ChatActivity,
		arg.LastChatActivityGrant,
		arg.VoiceActivity,
		arg.LastVoiceActivityGrant,
	)
	return err
}

const resetMemberProfile = `-- name: ResetMemberProfile :exec
UPDATE guild_profiles
SET
    card_style = DEFAULT,
    chat_activity = DEFAULT,
    last_chat_activity_grant = DEFAULT,
    voice_activity = DEFAULT,
    last_voice_activity_grant = DEFAULT
WHERE
    guild_id = $1
    AND member_id = $2
`

type ResetMemberProfileParams struct {
	GuildID  string
	MemberID string
}

func (q *Queries) ResetMemberProfile(ctx context.Context, arg ResetMemberProfileParams) error {
	_, err := q.db.ExecContext(ctx, resetMemberProfile, arg.GuildID, arg.MemberID)
	return err
}
