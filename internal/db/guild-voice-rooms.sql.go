// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: guild-voice-rooms.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createVoiceRoomLobby = `-- name: CreateVoiceRoomLobby :one
INSERT INTO guild_voice_rooms_settings (
    guild_id, voice_channel_id,
    user_limit, can_rename, can_lock, can_adjust_limit
)
SELECT
    $1, $2,
    COALESCE($3, 0)::INT,
    COALESCE($4, FALSE)::BOOLEAN,
    COALESCE($5, FALSE)::BOOLEAN,
    COALESCE($6, FALSE)::BOOLEAN
RETURNING insert_epoch, guild_id, voice_channel_id, user_limit, can_rename, can_lock, can_adjust_limit
`

type CreateVoiceRoomLobbyParams struct {
	GuildID        string
	VoiceChannelID string
	UserLimit      sql.NullInt32
	CanRename      sql.NullBool
	CanLock        sql.NullBool
	CanAdjustLimit sql.NullBool
}

func (q *Queries) CreateVoiceRoomLobby(ctx context.Context, arg CreateVoiceRoomLobbyParams) (GuildVoiceRoomsSetting, error) {
	row := q.db.QueryRowContext(ctx, createVoiceRoomLobby,
		arg.GuildID,
		arg.VoiceChannelID,
		arg.UserLimit,
		arg.CanRename,
		arg.CanLock,
		arg.CanAdjustLimit,
	)
	var i GuildVoiceRoomsSetting
	err := row.Scan(
		&i.InsertEpoch,
		&i.GuildID,
		&i.VoiceChannelID,
		&i.UserLimit,
		&i.CanRename,
		&i.CanLock,
		&i.CanAdjustLimit,
	)
	return i, err
}

const deleteVoiceRoom = `-- name: DeleteVoiceRoom :exec
DELETE FROM guild_active_voice_rooms
WHERE
    guild_id = $1
    AND channel_id = $2
`

type DeleteVoiceRoomParams struct {
	GuildID   string
	ChannelID string
}

func (q *Queries) DeleteVoiceRoom(ctx context.Context, arg DeleteVoiceRoomParams) error {
	_, err := q.db.ExecContext(ctx, deleteVoiceRoom, arg.GuildID, arg.ChannelID)
	return err
}

const deleteVoiceRoomLobby = `-- name: DeleteVoiceRoomLobby :exec
DELETE FROM guild_voice_rooms_settings
WHERE
    guild_id = $1
    AND voice_channel_id = $2
`

type DeleteVoiceRoomLobbyParams struct {
	GuildID        string
	VoiceChannelID string
}

func (q *Queries) DeleteVoiceRoomLobby(ctx context.Context, arg DeleteVoiceRoomLobbyParams) error {
	_, err := q.db.ExecContext(ctx, deleteVoiceRoomLobby, arg.GuildID, arg.VoiceChannelID)
	return err
}

const getVoiceRoom = `-- name: GetVoiceRoom :one
SELECT insert_epoch, guild_id, origin_channel_id, channel_id, created_by_user_id, current_owner_id, is_locked FROM guild_active_voice_rooms
WHERE
    guild_id = $1
    AND channel_id = $2
`

type GetVoiceRoomParams struct {
	GuildID   string
	ChannelID string
}

func (q *Queries) GetVoiceRoom(ctx context.Context, arg GetVoiceRoomParams) (GuildActiveVoiceRoom, error) {
	row := q.db.QueryRowContext(ctx, getVoiceRoom, arg.GuildID, arg.ChannelID)
	var i GuildActiveVoiceRoom
	err := row.Scan(
		&i.InsertEpoch,
		&i.GuildID,
		&i.OriginChannelID,
		&i.ChannelID,
		&i.CreatedByUserID,
		&i.CurrentOwnerID,
		&i.IsLocked,
	)
	return i, err
}

const getVoiceRoomLobbies = `-- name: GetVoiceRoomLobbies :many
SELECT
    guild_voice_rooms_settings.guild_id,
    guild_voice_rooms_settings.voice_channel_id,
    guild_voice_rooms_settings.user_limit,
    guild_voice_rooms_settings.can_rename,
    guild_voice_rooms_settings.can_lock,
    guild_voice_rooms_settings.can_adjust_limit,

    COALESCE(
        ARRAY_AGG(COALESCE(guild_active_voice_rooms.channel_id, '')),
        '{}'
    )::TEXT[] AS opened_rooms
FROM guild_voice_rooms_settings
LEFT JOIN guild_active_voice_rooms ON
    guild_voice_rooms_settings.guild_id = guild_active_voice_rooms.guild_id
WHERE guild_voice_rooms_settings.guild_id = $1
GROUP BY
    guild_voice_rooms_settings.guild_id,
    guild_voice_rooms_settings.voice_channel_id
`

type GetVoiceRoomLobbiesRow struct {
	GuildID        string
	VoiceChannelID string
	UserLimit      int32
	CanRename      bool
	CanLock        bool
	CanAdjustLimit bool
	OpenedRooms    []string
}

func (q *Queries) GetVoiceRoomLobbies(ctx context.Context, guildID string) ([]GetVoiceRoomLobbiesRow, error) {
	rows, err := q.db.QueryContext(ctx, getVoiceRoomLobbies, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVoiceRoomLobbiesRow
	for rows.Next() {
		var i GetVoiceRoomLobbiesRow
		if err := rows.Scan(
			&i.GuildID,
			&i.VoiceChannelID,
			&i.UserLimit,
			&i.CanRename,
			&i.CanLock,
			&i.CanAdjustLimit,
			pq.Array(&i.OpenedRooms),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVoiceRoomLobby = `-- name: GetVoiceRoomLobby :one
SELECT insert_epoch, guild_id, voice_channel_id, user_limit, can_rename, can_lock, can_adjust_limit FROM guild_voice_rooms_settings
WHERE
    guild_id = $1
    AND voice_channel_id = $2
`

type GetVoiceRoomLobbyParams struct {
	GuildID        string
	VoiceChannelID string
}

func (q *Queries) GetVoiceRoomLobby(ctx context.Context, arg GetVoiceRoomLobbyParams) (GuildVoiceRoomsSetting, error) {
	row := q.db.QueryRowContext(ctx, getVoiceRoomLobby, arg.GuildID, arg.VoiceChannelID)
	var i GuildVoiceRoomsSetting
	err := row.Scan(
		&i.InsertEpoch,
		&i.GuildID,
		&i.VoiceChannelID,
		&i.UserLimit,
		&i.CanRename,
		&i.CanLock,
		&i.CanAdjustLimit,
	)
	return i, err
}

const getVoiceRooms = `-- name: GetVoiceRooms :many
SELECT insert_epoch, guild_id, origin_channel_id, channel_id, created_by_user_id, current_owner_id, is_locked FROM guild_active_voice_rooms
WHERE
    guild_id = $1
    AND origin_channel_id = $2
`

type GetVoiceRoomsParams struct {
	GuildID         string
	OriginChannelID string
}

func (q *Queries) GetVoiceRooms(ctx context.Context, arg GetVoiceRoomsParams) ([]GuildActiveVoiceRoom, error) {
	rows, err := q.db.QueryContext(ctx, getVoiceRooms, arg.GuildID, arg.OriginChannelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GuildActiveVoiceRoom
	for rows.Next() {
		var i GuildActiveVoiceRoom
		if err := rows.Scan(
			&i.InsertEpoch,
			&i.GuildID,
			&i.OriginChannelID,
			&i.ChannelID,
			&i.CreatedByUserID,
			&i.CurrentOwnerID,
			&i.IsLocked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerVoiceRoom = `-- name: RegisterVoiceRoom :one
INSERT INTO guild_active_voice_rooms (
    guild_id, origin_channel_id,
    channel_id, created_by_user_id, current_owner_id
)
VALUES (
    $1, $2,
    $3, $4, $5
)
RETURNING insert_epoch, guild_id, origin_channel_id, channel_id, created_by_user_id, current_owner_id, is_locked
`

type RegisterVoiceRoomParams struct {
	GuildID         string
	OriginChannelID string
	ChannelID       string
	CreatedByUserID string
	CurrentOwnerID  string
}

func (q *Queries) RegisterVoiceRoom(ctx context.Context, arg RegisterVoiceRoomParams) (GuildActiveVoiceRoom, error) {
	row := q.db.QueryRowContext(ctx, registerVoiceRoom,
		arg.GuildID,
		arg.OriginChannelID,
		arg.ChannelID,
		arg.CreatedByUserID,
		arg.CurrentOwnerID,
	)
	var i GuildActiveVoiceRoom
	err := row.Scan(
		&i.InsertEpoch,
		&i.GuildID,
		&i.OriginChannelID,
		&i.ChannelID,
		&i.CreatedByUserID,
		&i.CurrentOwnerID,
		&i.IsLocked,
	)
	return i, err
}

const updateVoiceRoom = `-- name: UpdateVoiceRoom :one
UPDATE guild_active_voice_rooms
SET
    current_owner_id = COALESCE($1, current_owner_id),
    is_locked = COALESCE($2, is_locked)
WHERE
    guild_id = $3
    AND channel_id = $4
RETURNING insert_epoch, guild_id, origin_channel_id, channel_id, created_by_user_id, current_owner_id, is_locked
`

type UpdateVoiceRoomParams struct {
	CurrentOwnerID sql.NullString
	IsLocked       sql.NullBool
	GuildID        string
	ChannelID      string
}

func (q *Queries) UpdateVoiceRoom(ctx context.Context, arg UpdateVoiceRoomParams) (GuildActiveVoiceRoom, error) {
	row := q.db.QueryRowContext(ctx, updateVoiceRoom,
		arg.CurrentOwnerID,
		arg.IsLocked,
		arg.GuildID,
		arg.ChannelID,
	)
	var i GuildActiveVoiceRoom
	err := row.Scan(
		&i.InsertEpoch,
		&i.GuildID,
		&i.OriginChannelID,
		&i.ChannelID,
		&i.CreatedByUserID,
		&i.CurrentOwnerID,
		&i.IsLocked,
	)
	return i, err
}

const updateVoiceRoomLobby = `-- name: UpdateVoiceRoomLobby :exec
UPDATE guild_voice_rooms_settings
SET
    user_limit = COALESCE($1, user_limit)::INT,
    can_rename = COALESCE($2, can_rename)::BOOLEAN,
    can_lock = COALESCE($3, can_lock)::BOOLEAN,
    can_adjust_limit = COALESCE($4, can_adjust_limit)::BOOLEAN
WHERE
    guild_id = $5
    AND voice_channel_id = $6
`

type UpdateVoiceRoomLobbyParams struct {
	UserLimit      sql.NullInt32
	CanRename      sql.NullBool
	CanLock        sql.NullBool
	CanAdjustLimit sql.NullBool
	GuildID        string
	VoiceChannelID string
}

func (q *Queries) UpdateVoiceRoomLobby(ctx context.Context, arg UpdateVoiceRoomLobbyParams) error {
	_, err := q.db.ExecContext(ctx, updateVoiceRoomLobby,
		arg.UserLimit,
		arg.CanRename,
		arg.CanLock,
		arg.CanAdjustLimit,
		arg.GuildID,
		arg.VoiceChannelID,
	)
	return err
}
