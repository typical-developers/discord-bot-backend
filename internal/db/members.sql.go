// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: members.sql

package db

import (
	"context"
)

const createMemberProfile = `-- name: CreateMemberProfile :one
INSERT INTO guild_profiles (guild_id, member_id, activity_points)
    VALUES ($1, $2, $3)
RETURNING insert_epoch, guild_id, member_id, card_style, activity_points, last_grant_epoch
`

type CreateMemberProfileParams struct {
	GuildID        string
	MemberID       string
	ActivityPoints int32
}

func (q *Queries) CreateMemberProfile(ctx context.Context, arg CreateMemberProfileParams) (GuildProfile, error) {
	row := q.db.QueryRow(ctx, createMemberProfile, arg.GuildID, arg.MemberID, arg.ActivityPoints)
	var i GuildProfile
	err := row.Scan(
		&i.InsertEpoch,
		&i.GuildID,
		&i.MemberID,
		&i.CardStyle,
		&i.ActivityPoints,
		&i.LastGrantEpoch,
	)
	return i, err
}

const getMemberProfile = `-- name: GetMemberProfile :one
SELECT
    card_style,
    activity_points,
    last_grant_epoch
FROM guild_profiles
WHERE
    guild_id = $1
    AND member_id = $2
`

type GetMemberProfileParams struct {
	GuildID  string
	MemberID string
}

type GetMemberProfileRow struct {
	CardStyle      int32
	ActivityPoints int32
	LastGrantEpoch int32
}

func (q *Queries) GetMemberProfile(ctx context.Context, arg GetMemberProfileParams) (GetMemberProfileRow, error) {
	row := q.db.QueryRow(ctx, getMemberProfile, arg.GuildID, arg.MemberID)
	var i GetMemberProfileRow
	err := row.Scan(&i.CardStyle, &i.ActivityPoints, &i.LastGrantEpoch)
	return i, err
}

const getMemberRankings = `-- name: GetMemberRankings :one
WITH member_rankings AS (
    SELECT
        member_id,
        CAST(ROW_NUMBER() OVER (ORDER BY activity_points DESC) AS BIGINT) AS chat_rank
    FROM guild_profiles
    WHERE guild_id = $2
)
SELECT member_id, chat_rank FROM member_rankings
WHERE member_id = $1
`

type GetMemberRankingsParams struct {
	MemberID string
	GuildID  string
}

type GetMemberRankingsRow struct {
	MemberID string
	ChatRank int64
}

func (q *Queries) GetMemberRankings(ctx context.Context, arg GetMemberRankingsParams) (GetMemberRankingsRow, error) {
	row := q.db.QueryRow(ctx, getMemberRankings, arg.MemberID, arg.GuildID)
	var i GetMemberRankingsRow
	err := row.Scan(&i.MemberID, &i.ChatRank)
	return i, err
}

const incrememberMemberChatActivityPoints = `-- name: IncrememberMemberChatActivityPoints :one
UPDATE guild_profiles
SET
    activity_points = activity_points + $1,
    last_grant_epoch = EXTRACT(EPOCH FROM now() AT TIME ZONE 'utc')
WHERE
    guild_id = $2
    AND member_id = $3
RETURNING insert_epoch, guild_id, member_id, card_style, activity_points, last_grant_epoch
`

type IncrememberMemberChatActivityPointsParams struct {
	Points   int32
	GuildID  string
	MemberID string
}

func (q *Queries) IncrememberMemberChatActivityPoints(ctx context.Context, arg IncrememberMemberChatActivityPointsParams) (GuildProfile, error) {
	row := q.db.QueryRow(ctx, incrememberMemberChatActivityPoints, arg.Points, arg.GuildID, arg.MemberID)
	var i GuildProfile
	err := row.Scan(
		&i.InsertEpoch,
		&i.GuildID,
		&i.MemberID,
		&i.CardStyle,
		&i.ActivityPoints,
		&i.LastGrantEpoch,
	)
	return i, err
}

const setMemberChatActivityPoints = `-- name: SetMemberChatActivityPoints :one
UPDATE guild_profiles
SET
    activity_points = $1,
    last_grant_epoch = EXTRACT(EPOCH FROM now() AT TIME ZONE 'utc')
WHERE
    guild_id = $2
    AND member_id = $3
RETURNING insert_epoch, guild_id, member_id, card_style, activity_points, last_grant_epoch
`

type SetMemberChatActivityPointsParams struct {
	Points   int32
	GuildID  string
	MemberID string
}

func (q *Queries) SetMemberChatActivityPoints(ctx context.Context, arg SetMemberChatActivityPointsParams) (GuildProfile, error) {
	row := q.db.QueryRow(ctx, setMemberChatActivityPoints, arg.Points, arg.GuildID, arg.MemberID)
	var i GuildProfile
	err := row.Scan(
		&i.InsertEpoch,
		&i.GuildID,
		&i.MemberID,
		&i.CardStyle,
		&i.ActivityPoints,
		&i.LastGrantEpoch,
	)
	return i, err
}
