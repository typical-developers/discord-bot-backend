// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: guild-settings.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const appendGuildMessageEmbedSettingsArrays = `-- name: AppendGuildMessageEmbedSettingsArrays :exec
UPDATE guild_message_embeds_settings SET
    disabled_channels = CASE
        WHEN $1::TEXT IS NOT NULL THEN
            ARRAY(
                SELECT DISTINCT v
                FROM UNNEST(ARRAY_APPEND(guild_message_embeds_settings.disabled_channels, $1)) AS v
            )
        ELSE
            guild_message_embeds_settings.disabled_channels
    END,

    ignored_channels = CASE
        WHEN $2::TEXT IS NOT NULL THEN
            ARRAY(
                SELECT DISTINCT v
                FROM UNNEST(ARRAY_APPEND(guild_message_embeds_settings.ignored_channels, $2)) AS v
            )
        ELSE
            guild_message_embeds_settings.ignored_channels
    END,

    ignored_roles = CASE
        WHEN $3::TEXT IS NOT NULL THEN
            ARRAY(
                SELECT DISTINCT v
                FROM UNNEST(ARRAY_APPEND(guild_message_embeds_settings.ignored_roles, $3)) AS v
            )
        ELSE
            guild_message_embeds_settings.ignored_roles
    END
WHERE
    guild_id = $4
`

type AppendGuildMessageEmbedSettingsArraysParams struct {
	DisabledChannelID sql.NullString
	IgnoredChannelID  sql.NullString
	IgnoredRoleID     sql.NullString
	GuildID           string
}

func (q *Queries) AppendGuildMessageEmbedSettingsArrays(ctx context.Context, arg AppendGuildMessageEmbedSettingsArraysParams) error {
	_, err := q.db.ExecContext(ctx, appendGuildMessageEmbedSettingsArrays,
		arg.DisabledChannelID,
		arg.IgnoredChannelID,
		arg.IgnoredRoleID,
		arg.GuildID,
	)
	return err
}

const deleteActivityRole = `-- name: DeleteActivityRole :exec
DELETE FROM guild_activity_roles
WHERE
    guild_id = $1
    AND role_id = $2
`

type DeleteActivityRoleParams struct {
	GuildID string
	RoleID  string
}

func (q *Queries) DeleteActivityRole(ctx context.Context, arg DeleteActivityRoleParams) error {
	_, err := q.db.ExecContext(ctx, deleteActivityRole, arg.GuildID, arg.RoleID)
	return err
}

const getGuildActivityRoles = `-- name: GetGuildActivityRoles :many
SELECT
    role_id,
    required_points
FROM guild_activity_roles
WHERE
    guild_activity_roles.guild_id = $1
    AND grant_type = $2
GROUP BY grant_type, role_id, required_points
ORDER BY required_points ASC
`

type GetGuildActivityRolesParams struct {
	GuildID      string
	ActivityType string
}

type GetGuildActivityRolesRow struct {
	RoleID         string
	RequiredPoints sql.NullInt32
}

func (q *Queries) GetGuildActivityRoles(ctx context.Context, arg GetGuildActivityRolesParams) ([]GetGuildActivityRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, getGuildActivityRoles, arg.GuildID, arg.ActivityType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGuildActivityRolesRow
	for rows.Next() {
		var i GetGuildActivityRolesRow
		if err := rows.Scan(&i.RoleID, &i.RequiredPoints); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGuildChatActivitySettings = `-- name: GetGuildChatActivitySettings :one
SELECT
    is_enabled,
    grant_amount,
    grant_cooldown,
    deny_roles
FROM guild_chat_activity_settings
WHERE
    guild_chat_activity_settings.guild_id = $1
LIMIT 1
`

type GetGuildChatActivitySettingsRow struct {
	IsEnabled     bool
	GrantAmount   int32
	GrantCooldown int32
	DenyRoles     []string
}

func (q *Queries) GetGuildChatActivitySettings(ctx context.Context, guildID string) (GetGuildChatActivitySettingsRow, error) {
	row := q.db.QueryRowContext(ctx, getGuildChatActivitySettings, guildID)
	var i GetGuildChatActivitySettingsRow
	err := row.Scan(
		&i.IsEnabled,
		&i.GrantAmount,
		&i.GrantCooldown,
		pq.Array(&i.DenyRoles),
	)
	return i, err
}

const getGuildMessageEmbedSettings = `-- name: GetGuildMessageEmbedSettings :one
SELECT
    is_enabled,
    disabled_channels,
    ignored_channels,
    ignored_roles
FROM guild_message_embeds_settings
WHERE
    guild_message_embeds_settings.guild_id = $1
LIMIT 1
`

type GetGuildMessageEmbedSettingsRow struct {
	IsEnabled        bool
	DisabledChannels []string
	IgnoredChannels  []string
	IgnoredRoles     []string
}

func (q *Queries) GetGuildMessageEmbedSettings(ctx context.Context, guildID string) (GetGuildMessageEmbedSettingsRow, error) {
	row := q.db.QueryRowContext(ctx, getGuildMessageEmbedSettings, guildID)
	var i GetGuildMessageEmbedSettingsRow
	err := row.Scan(
		&i.IsEnabled,
		pq.Array(&i.DisabledChannels),
		pq.Array(&i.IgnoredChannels),
		pq.Array(&i.IgnoredRoles),
	)
	return i, err
}

const getGuildVoiceActivitySettings = `-- name: GetGuildVoiceActivitySettings :one
SELECT
    is_enabled,
    grant_amount,
    grant_cooldown,
    deny_roles
FROM guild_voice_activity_settings
WHERE
    guild_voice_activity_settings.guild_id = $1
LIMIT 1
`

type GetGuildVoiceActivitySettingsRow struct {
	IsEnabled     bool
	GrantAmount   int32
	GrantCooldown int32
	DenyRoles     []string
}

func (q *Queries) GetGuildVoiceActivitySettings(ctx context.Context, guildID string) (GetGuildVoiceActivitySettingsRow, error) {
	row := q.db.QueryRowContext(ctx, getGuildVoiceActivitySettings, guildID)
	var i GetGuildVoiceActivitySettingsRow
	err := row.Scan(
		&i.IsEnabled,
		&i.GrantAmount,
		&i.GrantCooldown,
		pq.Array(&i.DenyRoles),
	)
	return i, err
}

const insertActivityRole = `-- name: InsertActivityRole :exec
INSERT INTO guild_activity_roles (guild_id, grant_type, role_id, required_points)
    VALUES ($1, $2, $3, $4::INT)
`

type InsertActivityRoleParams struct {
	GuildID        string
	GrantType      string
	RoleID         string
	RequiredPoints int32
}

func (q *Queries) InsertActivityRole(ctx context.Context, arg InsertActivityRoleParams) error {
	_, err := q.db.ExecContext(ctx, insertActivityRole,
		arg.GuildID,
		arg.GrantType,
		arg.RoleID,
		arg.RequiredPoints,
	)
	return err
}

const registerGuild = `-- name: RegisterGuild :one
INSERT INTO guilds (guild_id)
VALUES ($1)
RETURNING insert_epoch, guild_id
`

func (q *Queries) RegisterGuild(ctx context.Context, guildID string) (Guild, error) {
	row := q.db.QueryRowContext(ctx, registerGuild, guildID)
	var i Guild
	err := row.Scan(&i.InsertEpoch, &i.GuildID)
	return i, err
}

const removeGuildMessageEmbedSettingsArrays = `-- name: RemoveGuildMessageEmbedSettingsArrays :exec
UPDATE guild_message_embeds_settings SET
    disabled_channels = CASE
        WHEN $1::TEXT IS NOT NULL THEN
            ARRAY_REMOVE(guild_message_embeds_settings.disabled_channels, $1)
        ELSE
            guild_message_embeds_settings.disabled_channels
    END,

    ignored_channels = CASE
        WHEN $2::TEXT IS NOT NULL THEN
            ARRAY_REMOVE(guild_message_embeds_settings.ignored_channels, $2)
        ELSE
            guild_message_embeds_settings.ignored_channels
    END,

    ignored_roles = CASE
        WHEN $3::TEXT IS NOT NULL THEN
            ARRAY_REMOVE(guild_message_embeds_settings.ignored_roles, $3)
        ELSE
            guild_message_embeds_settings.ignored_roles
    END
WHERE
    guild_id = $4
`

type RemoveGuildMessageEmbedSettingsArraysParams struct {
	DisabledChannelID sql.NullString
	IgnoredChannelID  sql.NullString
	IgnoredRoleID     sql.NullString
	GuildID           string
}

func (q *Queries) RemoveGuildMessageEmbedSettingsArrays(ctx context.Context, arg RemoveGuildMessageEmbedSettingsArraysParams) error {
	_, err := q.db.ExecContext(ctx, removeGuildMessageEmbedSettingsArrays,
		arg.DisabledChannelID,
		arg.IgnoredChannelID,
		arg.IgnoredRoleID,
		arg.GuildID,
	)
	return err
}

const updateGuildChatActivitySettings = `-- name: UpdateGuildChatActivitySettings :exec
UPDATE guild_chat_activity_settings SET
    is_enabled = COALESCE($1, guild_chat_activity_settings.is_enabled),
    grant_amount = COALESCE($2, guild_chat_activity_settings.grant_amount),
    grant_cooldown = COALESCE($3, guild_chat_activity_settings.grant_cooldown)
WHERE
    guild_id = $4
`

type UpdateGuildChatActivitySettingsParams struct {
	IsEnabled     sql.NullBool
	GrantAmount   sql.NullInt32
	GrantCooldown sql.NullInt32
	GuildID       string
}

func (q *Queries) UpdateGuildChatActivitySettings(ctx context.Context, arg UpdateGuildChatActivitySettingsParams) error {
	_, err := q.db.ExecContext(ctx, updateGuildChatActivitySettings,
		arg.IsEnabled,
		arg.GrantAmount,
		arg.GrantCooldown,
		arg.GuildID,
	)
	return err
}

const updateGuildMessageEmbedSettings = `-- name: UpdateGuildMessageEmbedSettings :exec
UPDATE guild_message_embeds_settings SET
    is_enabled = COALESCE($1, guild_message_embeds_settings.is_enabled)
WHERE
    guild_id = $2
`

type UpdateGuildMessageEmbedSettingsParams struct {
	IsEnabled sql.NullBool
	GuildID   string
}

func (q *Queries) UpdateGuildMessageEmbedSettings(ctx context.Context, arg UpdateGuildMessageEmbedSettingsParams) error {
	_, err := q.db.ExecContext(ctx, updateGuildMessageEmbedSettings, arg.IsEnabled, arg.GuildID)
	return err
}

const updateGuildVoiceActivitySettings = `-- name: UpdateGuildVoiceActivitySettings :exec
UPDATE guild_voice_activity_settings SET
    is_enabled = COALESCE($1, guild_voice_activity_settings.is_enabled),
    grant_amount = COALESCE($2, guild_voice_activity_settings.grant_amount),
    grant_cooldown = COALESCE($3, guild_voice_activity_settings.grant_cooldown)
WHERE
    guild_id = $4
`

type UpdateGuildVoiceActivitySettingsParams struct {
	IsEnabled     sql.NullBool
	GrantAmount   sql.NullInt32
	GrantCooldown sql.NullInt32
	GuildID       string
}

func (q *Queries) UpdateGuildVoiceActivitySettings(ctx context.Context, arg UpdateGuildVoiceActivitySettingsParams) error {
	_, err := q.db.ExecContext(ctx, updateGuildVoiceActivitySettings,
		arg.IsEnabled,
		arg.GrantAmount,
		arg.GrantCooldown,
		arg.GuildID,
	)
	return err
}
