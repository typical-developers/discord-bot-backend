// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: guild-settings.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createGuildSettings = `-- name: CreateGuildSettings :one
INSERT INTO guild_settings (guild_id)
VALUES ($1)
RETURNING insert_epoch, guild_id, chat_activity_tracking, chat_activity_grant, chat_activity_cooldown, chat_activity_deny_roles, voice_activity_tracking, voice_activity_grant, voice_activity_cooldown, voice_grant_deny
`

// Creates new generic guild settings.
func (q *Queries) CreateGuildSettings(ctx context.Context, guildID string) (GuildSetting, error) {
	row := q.db.QueryRowContext(ctx, createGuildSettings, guildID)
	var i GuildSetting
	err := row.Scan(
		&i.InsertEpoch,
		&i.GuildID,
		&i.ChatActivityTracking,
		&i.ChatActivityGrant,
		&i.ChatActivityCooldown,
		pq.Array(&i.ChatActivityDenyRoles),
		&i.VoiceActivityTracking,
		&i.VoiceActivityGrant,
		&i.VoiceActivityCooldown,
		pq.Array(&i.VoiceGrantDeny),
	)
	return i, err
}

const deleteActivityRole = `-- name: DeleteActivityRole :exec
DELETE FROM guild_activity_roles
WHERE
    guild_id = $1
    AND role_id = $2
`

type DeleteActivityRoleParams struct {
	GuildID string
	RoleID  string
}

func (q *Queries) DeleteActivityRole(ctx context.Context, arg DeleteActivityRoleParams) error {
	_, err := q.db.ExecContext(ctx, deleteActivityRole, arg.GuildID, arg.RoleID)
	return err
}

const getGuildActivityRoles = `-- name: GetGuildActivityRoles :many
SELECT
    role_id,
    required_points
FROM guild_activity_roles
WHERE
    guild_activity_roles.guild_id = $1
    AND grant_type = $2
GROUP BY grant_type, role_id, required_points
ORDER BY required_points ASC
`

type GetGuildActivityRolesParams struct {
	GuildID      string
	ActivityType string
}

type GetGuildActivityRolesRow struct {
	RoleID         string
	RequiredPoints sql.NullInt32
}

func (q *Queries) GetGuildActivityRoles(ctx context.Context, arg GetGuildActivityRolesParams) ([]GetGuildActivityRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, getGuildActivityRoles, arg.GuildID, arg.ActivityType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGuildActivityRolesRow
	for rows.Next() {
		var i GetGuildActivityRolesRow
		if err := rows.Scan(&i.RoleID, &i.RequiredPoints); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGuildSettings = `-- name: GetGuildSettings :one
SELECT
    insert_epoch,
    chat_activity_tracking,
    chat_activity_grant,
    chat_activity_cooldown
FROM guild_settings
WHERE
    guild_settings.guild_id = $1
LIMIT 1
`

type GetGuildSettingsRow struct {
	InsertEpoch          sql.NullInt32
	ChatActivityTracking sql.NullBool
	ChatActivityGrant    sql.NullInt32
	ChatActivityCooldown sql.NullInt32
}

func (q *Queries) GetGuildSettings(ctx context.Context, guildID string) (GetGuildSettingsRow, error) {
	row := q.db.QueryRowContext(ctx, getGuildSettings, guildID)
	var i GetGuildSettingsRow
	err := row.Scan(
		&i.InsertEpoch,
		&i.ChatActivityTracking,
		&i.ChatActivityGrant,
		&i.ChatActivityCooldown,
	)
	return i, err
}

const insertActivityRole = `-- name: InsertActivityRole :exec
INSERT INTO guild_activity_roles (guild_id, grant_type, role_id, required_points)
    VALUES ($1, $2, $3, $4::INT)
`

type InsertActivityRoleParams struct {
	GuildID        string
	GrantType      string
	RoleID         string
	RequiredPoints int32
}

func (q *Queries) InsertActivityRole(ctx context.Context, arg InsertActivityRoleParams) error {
	_, err := q.db.ExecContext(ctx, insertActivityRole,
		arg.GuildID,
		arg.GrantType,
		arg.RoleID,
		arg.RequiredPoints,
	)
	return err
}

const updateActivitySettings = `-- name: UpdateActivitySettings :exec
INSERT INTO
    guild_settings (
        guild_id,
        chat_activity_tracking, chat_activity_grant, chat_activity_cooldown,
        voice_activity_tracking, voice_activity_grant, voice_activity_cooldown
    )
    VALUES (
        $1,
        COALESCE($2::BOOLEAN, FALSE),
        COALESCE($3::INT, 2),
        COALESCE($4::INT, 15),
        COALESCE($5::BOOLEAN, FALSE),
        COALESCE($6::INT, 2),
        COALESCE($7::INT, 15)
    )
ON CONFLICT (guild_id)
DO UPDATE SET
    chat_activity_tracking = COALESCE($2, guild_settings.chat_activity_tracking),
    chat_activity_grant = COALESCE($3, guild_settings.chat_activity_grant),
    chat_activity_cooldown = COALESCE($4, guild_settings.chat_activity_cooldown),
    voice_activity_tracking = COALESCE($5, guild_settings.voice_activity_tracking),
    voice_activity_grant = COALESCE($6, guild_settings.voice_activity_grant),
    voice_activity_cooldown = COALESCE($7, guild_settings.voice_activity_cooldown)
RETURNING insert_epoch, guild_id, chat_activity_tracking, chat_activity_grant, chat_activity_cooldown, chat_activity_deny_roles, voice_activity_tracking, voice_activity_grant, voice_activity_cooldown, voice_grant_deny
`

type UpdateActivitySettingsParams struct {
	GuildID               string
	ChatActivityTracking  sql.NullBool
	ChatActivityGrant     sql.NullInt32
	ChatActivityCooldown  sql.NullInt32
	VoiceActivityTracking sql.NullBool
	VoiceActivityGrant    sql.NullInt32
	VoiceActivityCooldown sql.NullInt32
}

func (q *Queries) UpdateActivitySettings(ctx context.Context, arg UpdateActivitySettingsParams) error {
	_, err := q.db.ExecContext(ctx, updateActivitySettings,
		arg.GuildID,
		arg.ChatActivityTracking,
		arg.ChatActivityGrant,
		arg.ChatActivityCooldown,
		arg.VoiceActivityTracking,
		arg.VoiceActivityGrant,
		arg.VoiceActivityCooldown,
	)
	return err
}
